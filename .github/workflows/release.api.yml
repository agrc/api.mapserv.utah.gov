name: Release Events (API)

on:
  release:
    types:
      - published

permissions:
  contents: write
  id-token: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test-unit:
    name: Unit tests
    if: ${{ startsWith(github.ref, 'refs/tags/api') }}
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Set up code
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: 🟣️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: 💾 Cache NuGet Packages
        uses: actions/cache@v4
        with:
          # nuget cache files are stored in `~/.nuget/packages` on Linux/macOS
          path: ~/.nuget/packages
          key: ${{ runner.OS }}-nuget-${{ hashFiles('**/Packages.targets') }}
          restore-keys: |
            ${{ runner.OS }}-nuget-
            ${{ runner.OS }}

      - name: 🧪 Run tests
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../coverage.xml /p:Configuration=Release api.mapserv.utah.gov.sln --verbosity q --nologo

      - name: 📝️ Report coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  deploy-prod:
    name: 🚀 Deploy to Cloud Run (prod)
    if: ${{ startsWith(github.ref, 'refs/tags/api') }}
    runs-on: ubuntu-latest
    needs: [test-unit]
    environment:
      name: prod

    steps:
      - name: ⬇️ Set up code
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: 🗝️ Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        id: auth
        with:
          create_credentials_file: true
          token_format: access_token
          workload_identity_provider: ${{ secrets.IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: builder

      - name: 🗝️ Authenticate Docker to Google CLoud
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: 🏷️ Extract tags from GitHub
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/api
          tags: |
            type=ref,suffix=-{{sha}},event=branch
            type=ref,prefix=pr-,suffix=-{{sha}},event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest

      - name: 📦 Build and push image
        uses: docker/build-push-action@v6
        with:
          file: ./src/api/Dockerfile
          context: .
          builder: ${{ steps.builder.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍️ Set image name
        run: |
          IMAGE_ID=$(echo $DOCKER_METADATA_OUTPUT_TAGS | cut -d ' ' -f 1)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: 🚀 Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: api
          image: ${{ env.IMAGE_ID }}
          region: us-central1
          flags: |
            --service-account=cloud-run-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com
            --max-instances=5
            --concurrency=250
            --cpu=1
            --memory=512Mi
            --timeout=1m
          env_vars: >
            ASPNETCORE_ENVIRONMENT=Production,
            GCLOUD_PROJECT=${{ secrets.PROJECT_ID }}
          secrets: |
            /secrets/dotnet/appsettings.Production.json=dotnet-appsettings:latest
